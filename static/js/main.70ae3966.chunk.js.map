{"version":3,"sources":["components/pin.js","components/board.js","components/boards.js","App.js","serviceWorker.js","index.js"],"names":["className","value","v","Pin","pin","state","Board","board","num","t","toFixed","mac","target","rel","href","ip","port","formatRssi","rssi","uptimeDays","Math","floor","uptimeHours","uptimeMins","uptimeSecs","text","formatUptime","uptime","formatHeap","heap","sensors","index","Array","forEach","i","idx","item","Object","keys","map","k","fillSensors","key","Boards","boards","App","sendDate","Date","getTime","Promise","all","this","props","boardHosts","host","fetch","then","res","json","data","receiveDate","catch","console","log","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.70ae3966.chunk.js","sourcesContent":["import React from 'react';\n\nconst className = (value) => {\n    let v = 'info';\n\n    if (value === 0) {\n        v = 'success';\n    } else if (value === 1) {\n        v = 'danger';\n    }\n\n    return 'badge badge-pill badge-' + v + ' mr-1';\n};\n\n\nfunction Pin({ pin }) {\n    return (\n        <span className={className(pin.state)}>{pin.pin}</span>\n    );\n}\n\nexport default Pin;\n","import React from 'react';\nimport Pin from './pin';\n\nconst formatUptime = (value) => {\n    const uptimeDays = Math.floor(value / 86400);\n    const uptimeHours = Math.floor(value % 86400 / 3600);\n    const uptimeMins = Math.floor(value % 86400 % 3600 / 60);\n    const uptimeSecs = value % 60;\n\n    let text = '';\n    if (uptimeDays >= 1) text += uptimeDays + \"d \";\n    if (uptimeHours >= 1) text += \" \" + uptimeHours + \"h \";\n    if (uptimeMins >= 1) text += \" \" + uptimeMins + \"m \";\n    if (uptimeSecs > 1) text += \" \" + uptimeSecs + \"s\";\n\n    return text;\n}\n\nconst formatMilliseconds = (value) => {\n    return (value / 1000).toFixed(2) + 's';\n}\n\nconst formatHeap = (value) => {\n    return (value / 1000).toFixed(2) + 'k';\n}\n\nconst formatRssi = (value) => {\n    return 2 * (value + 100) + '%';\n}\n\nconst fillSensors = (sensors, num) => {\n    let index = {};\n\n    [...Array(num)].forEach((i, idx) => {\n        index[idx + 1] = '?';\n    });\n\n    sensors.forEach((item) => {\n        index[item.pin] = item.state;\n    });\n\n    return Object.keys(index).map((k) => {\n        return { pin: k, state: index[k] };\n    });\n}\n\nfunction Board({ board, num }) {\n    return (\n        <div className=\"card border-primary\">\n            <h5 className=\"card-header text-white bg-primary\">\n                <small className=\"float-right font-weight-normal mt-1\">({formatMilliseconds(board.t)})</small>\n                Board {num}\n            </h5>\n            <div className=\"card-body\">\n                <dl className=\"row\">\n                    <dt className=\"col-sm-4\">MAC</dt>\n                    <dd className=\"col-sm-8\">{board.mac}</dd>\n\n                    <dt className=\"col-sm-4\">HOST</dt>\n                    <dd className=\"col-sm-8\"><a target=\"_blank\" rel=\"noopener noreferrer\" href={'http://' + board.ip + ':' + board.port}>{board.ip}:{board.port}</a></dd>\n\n                    <dt className=\"col-sm-4\">WIFI</dt>\n                    <dd className=\"col-sm-8\">{formatRssi(board.rssi)}</dd>\n\n                    <dt className=\"col-sm-4\">UPTIME</dt>\n                    <dd className=\"col-sm-8\">{formatUptime(board.uptime)}</dd>\n\n                    <dt className=\"col-sm-4\">FREE</dt>\n                    <dd className=\"col-sm-8\">{formatHeap(board.heap)}</dd>\n                </dl>\n            </div>\n            <div className=\"card-footer\">\n                {fillSensors(board.sensors, 6).map((pin, i) => (\n                    <Pin pin={pin} key={i} />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Board;\n","import React from 'react';\nimport Pin from './pin';\nimport Board from './board';\n\nconst formatUptime = (value) => {\n    const uptimeDays = Math.floor(value / 86400);\n    const uptimeHours = Math.floor(value % 86400 / 3600);\n    const uptimeMins = Math.floor(value % 86400 % 3600 / 60);\n    const uptimeSecs = value % 60;\n\n    let text = '';\n    if (uptimeDays >= 1) text += uptimeDays + \"d \";\n    if (uptimeHours >= 1) text += \" \" + uptimeHours + \"h \";\n    if (uptimeMins >= 1) text += \" \" + uptimeMins + \"m \";\n    if (uptimeSecs > 1) text += \" \" + uptimeSecs + \"s\";\n\n    return text;\n}\n\nconst formatMilliseconds = (value) => {\n    return (value / 1000).toFixed(2) + 's';\n}\n\nconst formatHeap = (value) => {\n    return (value / 1000).toFixed(2) + 'k';\n}\n\nconst formatRssi = (value) => {\n    return 2 * (value + 100) + '%';\n}\n\nconst fillSensors = (sensors, num) => {\n    let index = {};\n\n    [...Array(num)].forEach((i, idx) => {\n        index[idx + 1] = '?';\n    });\n\n    sensors.forEach((item) => {\n        index[item.pin] = item.state;\n    });\n\n    return Object.keys(index).map((k) => {\n        return { pin: k, state: index[k] };\n    });\n}\n\nfunction Boards({ boards }) {\n    if (true) {\n        return (\n            <div className=\"row row-cols-1 row-cols-md-2 my-4 mx-2\">\n                {boards.map((board, i) => (\n                    <div className=\"col mb-4\" key={i}>\n                        <Board board={board} num={i + 1} />\n                    </div>\n                ))}\n            </div>\n        );\n    } else {\n\n        return (\n            <table className=\"table table-hover\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">board</th>\n                        <th scope=\"col\">mac</th>\n                        <th scope=\"col\">host</th>\n                        <th scope=\"col\">port</th>\n                        <th scope=\"col\">t</th>\n                        <th scope=\"col\">wifi</th>\n                        <th scope=\"col\">uptime</th>\n                        <th scope=\"col\">memory</th>\n                        <th scope=\"col\">sensors</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {boards.map((board, i) => (\n                        <tr key={i}>\n                            <th scope=\"row\">{i + 1}</th>\n                            <td>{board.mac}</td>\n                            <td>{board.ip}</td>\n                            <td>{board.port}</td>\n                            <td>{formatMilliseconds(board.t)}</td>\n                            <td>{formatRssi(board.rssi)}</td>\n                            <td>{formatUptime(board.uptime)}</td>\n                            <td>{formatHeap(board.heap)}</td>\n                            <td>\n                                {fillSensors(board.sensors, 6).map((pin, i) => (\n                                    <Pin pin={pin} key={i} />\n                                ))}\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Boards;\n","import React, { Component } from 'react';\nimport Boards from './components/boards';\nimport './App.css';\n\n// board  mac                host          port  t      wifi    uptime       memory    sensors\n// -------  -----------------  ----------  ------  -----  ------  -----------  --------  ---------------\n//       1  2c:f4:32:56:b5:89  10.0.0.122   13682  0.34s  50%     (3, 44, 16)  15.21k    [ X X _ _ _ _ ]\n//       2  84:f3:eb:da:12:4a  10.0.0.60    22291  0.54s  56%     (8, 49, 2)   15.55k    [ X _ _ _ _ _ ]\n//       3  2c:f4:32:56:b0:64  10.0.0.197   13681  0.21s  42%     (0, 18, 17)  15.75k    [ X _ _ _ _ _ ]\n//       4  84:f3:eb:d9:9d:79  10.0.0.62    22261  0.21s  50%     (0, 11, 28)  15.77k    [ O _ _ _ _ _ ]\n\n\nclass App extends Component {\n  state = {\n    boards: []\n  }\n\n  componentDidMount() {\n    const sendDate = (new Date()).getTime();\n\n    Promise.all(this.props.boardHosts.map((host) => {\n      return fetch('http://' + host + '/status')\n        .then(res => res.json())\n        .then((data) => {\n          const receiveDate = (new Date()).getTime();\n          return { ...data, t: receiveDate - sendDate };\n        })\n        .catch(console.log)\n    }))\n      .then((boards) => {\n        console.log(boards);\n        this.setState({ boards: boards });\n      });\n  }\n\n  render() {\n    return (\n      <Boards boards={this.state.boards} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst boardHosts = ['10.0.0.122:13682', '10.0.0.60:22291', '10.0.0.197:13681', '10.0.0.62:22261'];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App boardHosts={boardHosts} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}