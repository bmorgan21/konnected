{"version":3,"sources":["components/pin.js","utils.js","components/card_board.js","components/card_boards.js","components/table_board.js","components/table_boards.js","home.js","info.js","App.js","serviceWorker.js","index.js"],"names":["className","value","v","Pin","pin","state","uptimeDays","Math","floor","uptimeHours","uptimeMins","uptimeSecs","text","toFixed","sensors","num","index","Array","forEach","i","idx","item","Object","keys","map","k","host","port","target","rel","href","CardBoard","board","mac","utils","t","name","ip","rssi","uptime","heap","key","CardBoards","boards","format","Board","scope","TableBoards","Home","viewAs","URLSearchParams","useLocation","search","get","type","data-toggle","aria-haspopup","aria-expanded","to","Info","Child","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","data-target","aria-controls","aria-label","id","exact","path","children","App","update","this","setState","props","boardHosts","data","idx2","sendDate","Date","getTime","fetch","then","res","json","receiveDate","updateState","catch","console","log","basename","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f7ed20d6.chunk.js","sourcesContent":["import React from 'react';\n\nconst className = (value) => {\n    let v = 'info';\n\n    if (value === 0) {\n        v = 'success';\n    } else if (value === 1) {\n        v = 'danger';\n    }\n\n    return 'badge badge-pill badge-' + v + ' mr-1';\n};\n\n\nfunction Pin({ pin }) {\n    return (\n        <span className={className(pin.state)}>{pin.pin}</span>\n    );\n}\n\nexport default Pin;\n","import React from 'react';\n\nexport const formatUptime = (value) => {\n    const uptimeDays = Math.floor(value / 86400);\n    const uptimeHours = Math.floor(value % 86400 / 3600);\n    const uptimeMins = Math.floor(value % 86400 % 3600 / 60);\n    const uptimeSecs = value % 60;\n\n    let text = '';\n    if (uptimeDays >= 1) text += uptimeDays + \"d \";\n    if (uptimeHours >= 1) text += \" \" + uptimeHours + \"h \";\n    if (uptimeMins >= 1) text += \" \" + uptimeMins + \"m \";\n    if (uptimeSecs > 1) text += \" \" + uptimeSecs + \"s\";\n\n    if (text === '') {\n        text = 'n/a';\n    }\n\n    return text;\n}\n\nexport const formatMilliseconds = (value) => {\n    return (value / 1000).toFixed(2) + 's';\n}\n\nexport const formatHeap = (value) => {\n    return (value / 1000).toFixed(2) + 'k';\n}\n\nexport const formatRssi = (value) => {\n    return 2 * (value + 100) + '%';\n}\n\nexport const fillSensors = (sensors, num) => {\n    sensors = sensors || [];\n    let index = {};\n\n    [...Array(num)].forEach((i, idx) => {\n        index[idx + 1] = '?';\n    });\n\n    sensors.forEach((item) => {\n        index[item.pin] = item.state;\n    });\n\n    return Object.keys(index).map((k) => {\n        return { pin: k, state: index[k] };\n    });\n}\n\nexport const HostPort = ({ host, port }) => {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'http://' + host + ':' + port}>{host}:{port}</a>\n    );\n}\n\nexport default {\n    formatUptime, formatMilliseconds, formatHeap, formatRssi, fillSensors, HostPort\n}\n","import React from 'react';\nimport Pin from './pin';\nimport utils from '../utils';\n\nfunction CardBoard({ board }) {\n    board = board || { mac: 'DATA MISSING' };\n\n    return (\n        <div className=\"card border-primary\">\n            <h5 className=\"card-header text-white bg-primary\">\n                <small className=\"float-right font-weight-normal mt-1\">({utils.formatMilliseconds(board.t)})</small>\n                {board.name}\n            </h5>\n            <div className=\"card-body\">\n                <dl className=\"row mb-0\">\n                    <dt className=\"col-sm-4\">MAC</dt>\n                    <dd className=\"col-sm-8\">{board.mac}</dd>\n\n                    <dt className=\"col-sm-4\">HOST</dt>\n                    <dd className=\"col-sm-8\"><utils.HostPort host={board.ip} port={board.port} /></dd>\n\n                    <dt className=\"col-sm-4\">WIFI</dt>\n                    <dd className=\"col-sm-8\">{utils.formatRssi(board.rssi)}</dd>\n\n                    <dt className=\"col-sm-4\">UPTIME</dt>\n                    <dd className=\"col-sm-8\">{utils.formatUptime(board.uptime)}</dd>\n\n                    <dt className=\"col-sm-4\">FREE</dt>\n                    <dd className=\"col-sm-8\">{utils.formatHeap(board.heap)}</dd>\n                </dl>\n            </div>\n            <div className=\"card-footer\">\n                {utils.fillSensors(board.sensors, 6).map((pin, i) => (\n                    <Pin pin={pin} key={i} />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default CardBoard;\n","import React from 'react';\nimport CardBoard from './card_board';\n\nfunction CardBoards({ boards, format }) {\n    return (\n        <div className=\"row row-cols-1 row-cols-md-2\">\n            {boards.map((board, i) => (\n                <div className=\"col mb-4\" key={i}>\n                    <CardBoard board={board} />\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default CardBoards;\n","import React from 'react';\nimport Pin from './pin';\nimport utils from '../utils';\n\nfunction Board({ board }) {\n    board = board || { mac: 'DATA MISSING' };\n\n    return (\n        <tr>\n            <th scope=\"row\">{board.name}</th>\n            <td>{board.mac}</td>\n            <td><utils.HostPort host={board.ip} port={board.port} /></td>\n            <td>{utils.formatMilliseconds(board.t)}</td>\n            <td>{utils.formatRssi(board.rssi)}</td>\n            <td>{utils.formatUptime(board.uptime)}</td>\n            <td>{utils.formatHeap(board.heap)}</td>\n            <td>\n                {utils.fillSensors(board.sensors, 6).map((pin, i) => (\n                    <Pin pin={pin} key={i} />\n                ))}\n            </td>\n        </tr>\n    );\n}\n\nexport default Board;\n","import React from 'react';\nimport TableBoard from './table_board';\n\nfunction TableBoards({ boards, format }) {\n    return (\n        <table className=\"table table-hover\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">name</th>\n                    <th scope=\"col\">mac</th>\n                    <th scope=\"col\">host</th>\n                    <th scope=\"col\">t</th>\n                    <th scope=\"col\">wifi</th>\n                    <th scope=\"col\">uptime</th>\n                    <th scope=\"col\">free</th>\n                    <th scope=\"col\">sensors</th>\n                </tr>\n            </thead>\n            <tbody>\n                {boards.map((board, i) => (\n                    <TableBoard board={board} key={i} />\n                ))}\n            </tbody>\n        </table>\n    );\n}\n\nexport default TableBoards;\n","import React from 'react';\nimport {\n    Link,\n    useLocation\n} from \"react-router-dom\";\n\nimport CardBoards from './components/card_boards';\nimport TableBoards from './components/table_boards';\n\nfunction useQuery() {\n    return new URLSearchParams(useLocation().search);\n}\n\nfunction Home({ boards }) {\n    const query = useQuery();\n    const viewAs = query.get('v') || 'card';\n\n    return (\n        <>\n            <div className=\"mb-4 text-right\">\n                <div className=\"btn-group\">\n                    <button type=\"button\" className=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        View as {viewAs === 'card' ? 'Card' : 'Table'}\n                    </button>\n                    <div className=\"dropdown-menu dropdown-menu-right\">\n                        <Link className=\"dropdown-item\" to=\"/\">Card {viewAs === 'card' && <span className=\"text-primary\">&bull;</span>}</Link>\n                        <Link className=\"dropdown-item\" to=\"/?v=table\">Table {viewAs === 'table' && <span className=\"text-primary\">&bull;</span>}</Link>\n                    </div>\n                </div>\n            </div>\n\n            {viewAs === 'card' && <CardBoards boards={boards} />}\n            {viewAs === 'table' && <TableBoards boards={boards} />}\n        </>\n    )\n}\n\nexport default Home","import React from 'react';\n\nfunction Info() {\n    return (\n        <div>\n            Board 1\n            <ol>\n                <li>Garage Door</li>\n                <li>Garage Motion</li>\n            </ol>\n\n            Board 2\n            <ol>\n                <li>Dining Room Motion</li>\n            </ol>\n\n            Board 3\n            <ol>\n                <li>Kitchen Motion</li>\n            </ol>\n        </div>\n    )\n}\n\nexport default Info;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from \"react-router-dom\";\n\nimport Home from './home';\nimport Info from './info';\n\n// board  mac                host          port  t      wifi    uptime       memory    sensors\n// -------  -----------------  ----------  ------  -----  ------  -----------  --------  ---------------\n//       1  2c:f4:32:56:b5:89  10.0.0.122   13682  0.34s  50%     (3, 44, 16)  15.21k    [ X X _ _ _ _ ]\n//       2  84:f3:eb:da:12:4a  10.0.0.60    22291  0.54s  56%     (8, 49, 2)   15.55k    [ X _ _ _ _ _ ]\n//       3  2c:f4:32:56:b0:64  10.0.0.197   13681  0.21s  42%     (0, 18, 17)  15.75k    [ X _ _ _ _ _ ]\n//       4  84:f3:eb:d9:9d:79  10.0.0.62    22261  0.21s  50%     (0, 11, 28)  15.77k    [ O _ _ _ _ _ ]\n\nclass App extends Component {\n  state = {\n    boards: [],\n    format: 'card'\n  }\n\n  updateState(idx, board) {\n    let update = {};\n    update['board_' + idx] = board;\n\n    this.setState(update);\n    this.setState({\n      boards: this.props.boardHosts.map((data, idx2) => {\n        if (idx === idx2) {\n          return board;\n        } else {\n          return this.state['board_' + idx2] || this.state.boards[idx2];\n        }\n      })\n    });\n  }\n\n  componentDidMount() {\n    const sendDate = (new Date()).getTime();\n\n    this.setState({\n      boards: this.props.boardHosts.map(({ host, port }, idx) => {\n        return { 'name': 'Board ' + (idx + 1), 'mac': 'Loading...', ip: host, port: port }\n      })\n    })\n\n    this.props.boardHosts.forEach(({ host, port }, idx) => {\n      fetch('http://' + host + ':' + port + '/status')\n        .then(res => res.json())\n        .then((data) => {\n          const receiveDate = (new Date()).getTime();\n          const board = { ...data, t: receiveDate - sendDate, 'name': 'Board ' + (idx + 1) };\n\n          this.updateState(idx, board);\n        })\n        .catch((data) => {\n          this.updateState(idx, { 'name': 'Board ' + (idx + 1), 'mac': '' + data, ip: host, port: port });\n          console.log(data);\n        });\n    })\n  }\n\n  render() {\n    return (\n      <Router basename='/konnected'>\n        <Child boards={this.state.boards} />\n      </Router>\n    )\n  }\n}\n\nfunction Child({ boards }) {\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <NavLink to=\"/\" className=\"navbar-brand\">\n          <svg className=\"bi bi-house-door align-text-top\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fillRule=\"evenodd\" d=\"M7.646 1.146a.5.5 0 01.708 0l6 6a.5.5 0 01.146.354v7a.5.5 0 01-.5.5H9.5a.5.5 0 01-.5-.5v-4H7v4a.5.5 0 01-.5.5H2a.5.5 0 01-.5-.5v-7a.5.5 0 01.146-.354l6-6zM2.5 7.707V14H6v-4a.5.5 0 01.5-.5h3a.5.5 0 01.5.5v4h3.5V7.707L8 2.207l-5.5 5.5z\" clipRule=\"evenodd\" />\n            <path fillRule=\"evenodd\" d=\"M13 2.5V6l-2-2V2.5a.5.5 0 01.5-.5h1a.5.5 0 01.5.5z\" clipRule=\"evenodd\" />\n          </svg>\n        </NavLink>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div className=\"navbar-nav\">\n            <NavLink to=\"/info\" className=\"nav-item nav-link\">\n              Board Info\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"m-4\">\n        <Switch>\n          <Route exact path=\"/\" children={<Home boards={boards} />} />\n          <Route path=\"/info\" children={<Info />} />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst boardHosts = [{ host: '10.0.0.122', port: 13682 }, { host: '10.0.0.60', port: 22291 }, { host: '10.0.0.197', port: 13681 }, { host: '10.0.0.62', port: 22261 }];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App boardHosts={boardHosts} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}